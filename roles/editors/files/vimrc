" DEFAULT VIM CONFIG FILE
" The default vimrc file.
"
" Maintainer:	Bram Moolenaar <Bram@vim.org>
" Last change:	2017 Jun 13
"
" This is loaded if no vimrc file was found.
" Except when Vim is run with "-u NONE" or "-C".
" Individual settings can be reverted with ":set option&".
" Other commands can be reverted as mentioned below.

" When started as "evim", evim.vim will already have done these settings.
if v:progname =~? "evim"
  finish
endif

" Bail out if something that ran earlier, e.g. a system wide vimrc, does not
" want Vim to use these default values.
if exists('skip_defaults_vim')
  finish
endif

" Use Vim settings, rather than Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
" Avoid side effects when it was already reset.
if &compatible
  set nocompatible
endif

" When the +eval feature is missing, the set command above will be skipped.
" Use a trick to reset compatible only when the +eval feature is missing.
silent! while 0
  set nocompatible
silent! endwhile

" Allow backspacing over everything in insert mode.
set backspace=indent,eol,start

set history=200		" keep 200 lines of command line history
set ruler		" show the cursor position all the time
set showcmd		" display incomplete commands
set wildmenu		" display completion matches in a status line

set ttimeout		" time out for key codes
set ttimeoutlen=100	" wait up to 100ms after Esc for special key

" Show @@@ in the last line if it is truncated.
set display=truncate

" Show a few lines of context around the cursor.  Note that this makes the
" text scroll if you mouse-click near the start or end of the window.
set scrolloff=5

" Do incremental searching when it's possible to timeout.
if has('reltime')
  set incsearch
endif

" Do not recognize octal numbers for Ctrl-A and Ctrl-X, most users find it
" confusing.
set nrformats-=octal

" Don't use Ex mode, use Q for formatting.
" Revert with ":unmap Q".
map Q gq

" CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
" so that you can undo CTRL-U after inserting a line break.
" Revert with ":iunmap <C-U>".
inoremap <C-U> <C-G>u<C-U>

" In many terminal emulators the mouse works just fine.  By enabling it you
" can position the cursor, Visually select and scroll with the mouse.
if has('mouse')
  set mouse=a
endif

" Switch syntax highlighting on when the terminal has colors or when using the
" GUI (which always has colors).
if &t_Co > 2 || has("gui_running")
  " Revert with ":syntax off".
  syntax on

  " I like highlighting strings inside C comments.
  " Revert with ":unlet c_comment_strings".
  let c_comment_strings=1
endif

" Only do this part when compiled with support for autocommands.
if has("autocmd")

  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  " Revert with ":filetype off".
  filetype plugin indent on

  " Put these in an autocmd group, so that you can revert them with:
  " ":augroup vimStartup | au! | augroup END"
  augroup vimStartup
    au!

    " When editing a file, always jump to the last known cursor position.
    " Don't do it when the position is invalid, when inside an event handler
    " (happens when dropping a file on gvim) and for a commit message (it's
    " likely a different one than last time).
    autocmd BufReadPost *
      \ if line("'\"") >= 1 && line("'\"") <= line("$") && &ft !~# 'commit'
      \ |   exe "normal! g`\""
      \ | endif

  augroup END

endif " has("autocmd")

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
" Revert with: ":delcommand DiffOrig".
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis
		  \ | wincmd p | diffthis
endif

if has('langmap') && exists('+langremap')
  " Prevent that the langmap option applies to characters that result from a
  " mapping.  If set (default), this may break plugins (but it's backward
  " compatible).
  set nolangremap
endif




" CUSTOM CONFIG
" Vundle
set nocompatible              " required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'
" Folding
Plugin 'tmhedberg/SimpylFold'
" db interface
Plugin 'dbext.vim'
" Indents for python
Plugin 'vim-scripts/indentpython.vim'
" Vim LaTeX support
Plugin 'lervag/vimtex'
" Vim Go support
Plugin 'fatih/vim-go'
" Colors
Plugin 'jnurmine/Zenburn'
Plugin 'altercation/vim-colors-solarized'
" Sessions
Plugin 'tpope/vim-obsession'
" Planutml previews on save
" TODO: modify that plugin so it can support class-like declarations.
" Plugin 'scrooloose/vim-slumlord'
Plugin 'tyru/open-browser.vim'
Plugin 'weirongxu/plantuml-previewer.vim'
" Planuml syntax
Plugin 'aklt/plantuml-syntax'
" Asynchrounous checkers.
Plugin 'w0rp/ale'
" Pretty status bar 
Plugin 'vim-airline/vim-airline'
" Autocompleting
Plugin 'Valloric/YouCompleteMe'
" Git commit support
Plugin 'jreybert/vimagit'
" Beautify on :Au.
Plugin 'Chiel92/vim-autoformat'
" File tree.
Plugin 'scrooloose/nerdtree'
" Git stuff for file tree.
Plugin 'Xuyuanp/nerdtree-git-plugin'
" Julia support.
Plugin 'JuliaEditorSupport/julia-vim'
" Markdown
Plugin 'godlygeek/tabular'
Plugin 'plasticboy/vim-markdown'
" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required

" End of Vundle

if v:progname =~? "evim"
  finish
endif

if has("vms")
  set nobackup		" do not keep a backup file, use versions instead
else
  set backup		" keep a backup file (restore to previous version)
  if has('persistent_undo')
    set undofile	" keep an undo file (undo changes after closing)
  endif
endif

" Set encoding
set encoding=utf-8

" Add tab = 4 spaces (for ALL, some overwrites later)
set tabstop=8 softtabstop=0 expandtab shiftwidth=4 smarttab

"split navigations
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" Enable folding
set foldmethod=indent
set foldlevel=99

" Enable folding with the spacebar
nnoremap <space> za

" Docstring for folded code
let g:SimpylFold_docstring_preview=1

" set showcmd
let mapleader = " "

" find python binary for ycm
let g:ycm_python_binary_path = 'python3'

" Python PEP8 standards
au BufNewFile,BufRead *.py set tabstop=4
au BufNewFile,BufRead *.py set softtabstop=4
au BufNewFile,BufRead *.py set shiftwidth=4
au BufNewFile,BufRead *.py set textwidth=79
au BufNewFile,BufRead *.py set expandtab
au BufNewFile,BufRead *.py set autoindent
au BufNewFile,BufRead *.py set fileformat=unix

" Define BadWhitespace and mark as darkred in py files
highlight BadWhitespace ctermbg=red guibg=darkred
au BufRead,BufNewFile *.py,*.pyw,*.c,*.h match BadWhitespace /\s\+$/

" Red line at 79-th line in .py and .cpp files
au BufNewFile,BufRead *.py set colorcolumn=79
au BufNewFile,BufRead *.cpp set colorcolumn=79
au BufNewFile,BufRead *.cpp highlight ColorColumn ctermbg=2

" Similar but for webdev
au BufNewFile,BufRead *.js set tabstop=4
au BufNewFile,BufRead *.ts set tabstop=4
au BufNewFile,BufRead *.html set tabstop=4
au BufNewFile,BufRead *.css set tabstop=4
au BufNewFile,BufRead *.scss set tabstop=4

au BufNewFile,BufRead *.js set softtabstop=4
au BufNewFile,BufRead *.ts set softtabstop=4
au BufNewFile,BufRead *.html set softtabstop=4
au BufNewFile,BufRead *.css set softtabstop=4
au BufNewFile,BufRead *.scss set softtabstop=4

au BufNewFile,BufRead *.js set shiftwidth=4
au BufNewFile,BufRead *.ts set shiftwidth=4
au BufNewFile,BufRead *.html set shiftwidth=4
au BufNewFile,BufRead *.css set shiftwidth=4
au BufNewFile,BufRead *.scss set shiftwidth=4

" Syntax Python
let python_highlight_all=1
syntax on

" ColorSchemes
if has('gui_running')
  set background=dark
  colorscheme solarized
else
  colorscheme zenburn
endif

" Lines numbering
set nu

" Latex live preview default pdf opener -> zathura
let g:vimtex_view_general_viewer = 'zathura'

" vim-go setup

" use goimports for formatting
let g:go_fmt_command = "goimports"

" turn highlighting on
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1

" Syntastic


" Beautify shortcut
noremap <F3> :Autoformat<CR>

" YouCompleteMe configuration

" Autoclose preview after match.
let g:ycm_autoclose_preview_window_after_completion=1

map <leader>g  :YcmCompleter GoToDefinitionElseDeclaration<CR>

" Start YCM in python and go after 2 chars
let g:ycm_semantic_triggers = {
            \   'python': [ 're!\w{2}', 're!(import\s+|from\s+(\w+\s+(import\s+(\w+,\s+)*)?)?)' ],
            \   'javascript': [ 're!\w{2}', 're!(import\s+|from\s+(\w+\s+(import\s+(\w+,\s+)*)?)?)' ]
            \ }

  "          \   'go': [ 're!\w{2}', 're!(import\s+|from\s+(\w+\s+(import\s+(\w+,\s+)*)?)?)' ],
" Set global config file for YCM.
let g:ycm_global_ycm_extra_conf = '~/.ycm_extra_conf.py'

" NERDTree
map <C-n> :NERDTreeToggle<CR>
" NERDTress File highlighting (thanks to @ryanoasis at github.com See: https://github.com/scrooloose/nerdtree/issues/433#issuecomment-92590696 )
function! NERDTreeHighlightFile(extension, fg, bg, guifg, guibg)
 exec 'autocmd filetype nerdtree highlight ' . a:extension .' ctermbg='. a:bg .' ctermfg='. a:fg .' guibg='. a:guibg .' guifg='. a:guifg
 exec 'autocmd filetype nerdtree syn match ' . a:extension .' #^\s\+.*'. a:extension .'$#'
endfunction

call NERDTreeHighlightFile('jade', 'green', 'none', 'green', '#151515')
call NERDTreeHighlightFile('ini', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('md', 'blue', 'none', '#3366FF', '#151515')
call NERDTreeHighlightFile('yml', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('config', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('conf', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('json', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('html', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('styl', 'cyan', 'none', 'cyan', '#151515')
call NERDTreeHighlightFile('css', 'cyan', 'none', 'cyan', '#151515')
call NERDTreeHighlightFile('coffee', 'Red', 'none', 'red', '#151515')
call NERDTreeHighlightFile('js', 'Red', 'none', '#ffa500', '#151515')
call NERDTreeHighlightFile('php', 'Magenta', 'none', '#ff00ff', '#151515')

" Only run linters named in ale_linters settings.
let g:ale_linters_explicit = 1

" Enable specific linters only.
let g:ale_linters = {
\   'javascript': ['jslint'],
\   'python'    : ['mypy', 'flake8'],
\   'go'        : ['go', 'golint', 'govet', 'errcheck']
\}

let g:ale_lint_on_text_changed = 'never'
" You can disable this option too
" if you don't want linters to run on opening a file
" let g:ale_lint_on_enter = 0

"let g:syntastic_javascript_jslint_args = "--browser"
